{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { StackActions, SceneView } from 'react-navigation';\nimport CardStack from \"./CardStack\";\nimport KeyboardManager from \"../KeyboardManager\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport SafeAreaProviderCompat from \"../SafeAreaProviderCompat\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  function StackView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getGesturesEnabled\", function (_ref) {\n      var route = _ref.route;\n      var descriptor = _this.state.descriptors[route.key];\n\n      if (descriptor) {\n        var _descriptor$options3 = descriptor.options,\n            gestureEnabled = _descriptor$options3.gestureEnabled,\n            animationEnabled = _descriptor$options3.animationEnabled;\n\n        if (animationEnabled === false) {\n          return false;\n        }\n\n        return gestureEnabled !== undefined ? gestureEnabled : Platform.OS !== 'android';\n      }\n\n      return false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousRoute\", function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n          closingRouteKeys = _this$state.closingRouteKeys,\n          replacingRouteKeys = _this$state.replacingRouteKeys;\n\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderScene\", function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n\n      if (!descriptor) {\n        return null;\n      }\n\n      var navigation = descriptor.navigation,\n          getComponent = descriptor.getComponent;\n      var SceneComponent = getComponent();\n      return React.createElement(SceneView, {\n        screenProps: _this.props.screenProps,\n        navigation: navigation,\n        component: SceneComponent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHeader\", function (props) {\n      return React.createElement(HeaderContainer, props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionComplete\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props2 = _this.props,\n          state = _this$props2.state,\n          navigation = _this$props2.navigation;\n\n      if (state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: route.key\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenRoute\", function (_ref5) {\n      var route = _ref5.route;\n\n      _this.handleTransitionComplete({\n        route: route\n      });\n\n      _this.setState(function (state) {\n        return {\n          routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n            return !state.replacingRouteKeys.includes(r.key);\n          }) : state.routes,\n          openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n            return key !== route.key;\n          }),\n          closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n            return key !== route.key;\n          }),\n          replacingRouteKeys: []\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCloseRoute\", function (_ref6) {\n      var route = _ref6.route;\n      var _this$props3 = _this.props,\n          state = _this$props3.state,\n          navigation = _this$props3.navigation;\n\n      if (state.routes.find(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(StackActions.pop({\n          key: route.key\n        }));\n      } else {\n        var index = _this.state.routes.findIndex(function (r) {\n          return r.key === route.key;\n        });\n\n        _this.handleTransitionComplete({\n          route: _this.state.routes[Math.max(index - 1, 0)]\n        });\n\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionStart\", function (_ref7, closing) {\n      var route = _ref7.route;\n\n      var _descriptor$options$o, _descriptor$options;\n\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o = (_descriptor$options = descriptor.options).onTransitionStart) === null || _descriptor$options$o === void 0 ? void 0 : _descriptor$options$o.call(_descriptor$options, {\n        closing: closing\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function (_ref8, closing) {\n      var route = _ref8.route;\n\n      var _descriptor$options$o2, _descriptor$options2;\n\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o2 = (_descriptor$options2 = descriptor.options).onTransitionEnd) === null || _descriptor$options$o2 === void 0 ? void 0 : _descriptor$options$o2.call(_descriptor$options2, {\n        closing: closing\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          state = _this$props.state,\n          navigation = _this$props.navigation,\n          keyboardHandlingEnabled = _this$props.keyboardHandlingEnabled,\n          _this$props$mode = _this$props.mode,\n          mode = _this$props$mode === void 0 ? 'card' : _this$props$mode,\n          rest = _objectWithoutProperties(_this$props, [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\"]);\n\n      var _this$state2 = this.state,\n          routes = _this$state2.routes,\n          descriptors = _this$state2.descriptors,\n          openingRouteKeys = _this$state2.openingRouteKeys,\n          closingRouteKeys = _this$state2.closingRouteKeys;\n      var headerMode = mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n      return React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(SafeAreaProviderCompat, null, React.createElement(SafeAreaConsumer, null, function (insets) {\n        return React.createElement(KeyboardManager, {\n          enabled: keyboardHandlingEnabled !== false\n        }, function (props) {\n          return React.createElement(CardStack, _extends({\n            mode: mode,\n            insets: insets,\n            getPreviousRoute: _this2.getPreviousRoute,\n            getGesturesEnabled: _this2.getGesturesEnabled,\n            routes: routes,\n            openingRouteKeys: openingRouteKeys,\n            closingRouteKeys: closingRouteKeys,\n            onOpenRoute: _this2.handleOpenRoute,\n            onCloseRoute: _this2.handleCloseRoute,\n            onTransitionComplete: _this2.handleTransitionComplete,\n            onTransitionStart: _this2.handleTransitionStart,\n            onTransitionEnd: _this2.handleTransitionEnd,\n            renderHeader: _this2.renderHeader,\n            renderScene: _this2.renderScene,\n            headerMode: headerMode,\n            state: state,\n            descriptors: descriptors\n          }, rest, props));\n        });\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.state.routes === state.previousRoutes && state.routes.length) {\n        if (props.descriptors !== state.previousDescriptors) {\n          var _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n\n          return {\n            previousDescriptors: props.descriptors,\n            descriptors: _descriptors\n          };\n        }\n\n        return null;\n      }\n\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n          closingRouteKeys = state.closingRouteKeys,\n          replacingRouteKeys = state.replacingRouteKeys,\n          previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.find(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n\n            if (!routes.find(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.find(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes;\n\n        routes = routes.slice();\n\n        (_routes = routes).splice.apply(_routes, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref9) {\n          var key = _ref9.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["StackView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","React","props","state","descriptors","acc","route","previousDescriptors","routes","previousRoutes","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","key","descriptor","getAnimationTypeForReplace","r","openingRouteKeys","closingRouteKeys","replacingRouteKeys","animationEnabled","gestureEnabled","Platform","index","getComponent","SceneComponent","navigation","toChildKey","Math","closing","mode","headerMode","styles","container","insets","keyboardHandlingEnabled","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  SceneView,\n} from 'react-navigation';\n\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (props.state.routes === state.previousRoutes && state.routes.length) {\n      if (props.descriptors !== state.previousDescriptors) {\n        const descriptors = state.routes.reduce<StackDescriptorMap>(\n          (acc, route) => {\n            acc[route.key] =\n              props.descriptors[route.key] || state.descriptors[route.key];\n\n            return acc;\n          },\n          {}\n        );\n\n        return {\n          previousDescriptors: props.descriptors,\n          descriptors,\n        };\n      }\n\n      return null;\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.find(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                key => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                key => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      r =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex(r => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: route.key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    this.handleTransitionComplete({ route });\n    this.setState(state => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n      replacingRouteKeys: [],\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.find(r => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key }));\n    } else {\n      // While closing route we need to point to the previous one assuming that\n      // this previous one in routes array\n      const index = this.state.routes.findIndex(r => r.key === route.key);\n\n      this.handleTransitionComplete({\n        route: this.state.routes[Math.max(index - 1, 0)],\n      });\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState(state => ({\n        routes: state.routes.filter(r => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          key => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          key => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaConsumer>\n            {insets => (\n              <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                {props => (\n                  <CardStack\n                    mode={mode}\n                    insets={insets as EdgeInsets}\n                    getPreviousRoute={this.getPreviousRoute}\n                    getGesturesEnabled={this.getGesturesEnabled}\n                    routes={routes}\n                    openingRouteKeys={openingRouteKeys}\n                    closingRouteKeys={closingRouteKeys}\n                    onOpenRoute={this.handleOpenRoute}\n                    onCloseRoute={this.handleCloseRoute}\n                    onTransitionComplete={this.handleTransitionComplete}\n                    onTransitionStart={this.handleTransitionStart}\n                    onTransitionEnd={this.handleTransitionEnd}\n                    renderHeader={this.renderHeader}\n                    renderScene={this.renderScene}\n                    headerMode={headerMode}\n                    state={state}\n                    descriptors={descriptors}\n                    {...rest}\n                    {...props}\n                  />\n                )}\n              </KeyboardManager>\n            )}\n          </SafeAreaConsumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
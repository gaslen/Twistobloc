{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/gaston/Twistobloc/src/Components/Game/Game.js\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport colors from \"../../Helpers/colors\";\n\nvar Game = function (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game() {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this));\n\n    _this._Generate_numbers = function () {\n      _this.setState({\n        NumberBody: Math.random(),\n        NumberColor: Math.random()\n      });\n    };\n\n    _this._sample_body_part = function () {\n      var body_part = _this.body_parts[Math.floor(_this.state.NumberBody * _this.body_parts.length)];\n\n      return body_part;\n    };\n\n    _this._sample_color = function () {\n      var i,\n          sum = 0;\n\n      for (i in colors) {\n        sum += colors[i].weight / _this.sum_weights;\n\n        if (_this.state.NumberColor <= sum) {\n          return i;\n        }\n      }\n    };\n\n    _this.body_parts = [\"Jambe gauche\", \"Jambe droite\", \"Bras gauche\", \"Bras droit\"];\n    _this.sum_weights = 0;\n\n    for (i in colors) {\n      _this.sum_weights += colors[i].weight;\n    }\n\n    _this.state = {\n      NumberBody: Math.random(),\n      NumberColor: Math.random()\n    };\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      col = this._sample_color();\n      return React.createElement(View, {\n        style: [styles.main_style, {\n          backgroundColor: colors[col].id\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: styles.main_style,\n        onPress: function onPress() {\n          return _this2._Generate_numbers();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        }\n      }, React.createElement(Text, {\n        style: styles.text_style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        }\n      }, this._sample_body_part(), \" \", colors[col].fr)));\n    }\n  }]);\n\n  return Game;\n}(React.Component);\n\nstyles = StyleSheet.create({\n  main_style: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  text_style: {\n    fontWeight: 'bold',\n    fontSize: 26,\n    color: '#A9A9A9',\n    fontStyle: 'italic'\n  }\n});\nexport default Game;","map":{"version":3,"sources":["/home/gaston/Twistobloc/src/Components/Game/Game.js"],"names":["React","colors","Game","_Generate_numbers","setState","NumberBody","Math","random","NumberColor","_sample_body_part","body_part","body_parts","floor","state","length","_sample_color","i","sum","weight","sum_weights","col","styles","main_style","backgroundColor","id","text_style","fr","Component","StyleSheet","create","flex","alignItems","justifyContent","fontWeight","fontSize","color","fontStyle"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;AAEA,OAAOC,MAAP;;IAGMC,I;;;AACJ,kBAAa;AAAA;;AAAA;;AAEX;;AAFW,UAcbC,iBAda,GAcO,YAAM;AACxB,YAAKC,QAAL,CAAc;AAEZC,QAAAA,UAAU,EAAGC,IAAI,CAACC,MAAL,EAFD;AAGZC,QAAAA,WAAW,EAAEF,IAAI,CAACC,MAAL;AAHD,OAAd;AAMD,KArBY;;AAAA,UAwBbE,iBAxBa,GAwBO,YAAM;AACxB,UAAIC,SAAS,GAAG,MAAKC,UAAL,CAAgBL,IAAI,CAACM,KAAL,CAAW,MAAKC,KAAL,CAAWR,UAAX,GAAwB,MAAKM,UAAL,CAAgBG,MAAnD,CAAhB,CAAhB;;AACA,aAAOJ,SAAP;AACD,KA3BY;;AAAA,UA6BbK,aA7Ba,GA6BG,YAAM;AAEpB,UAAIC,CAAJ;AAAA,UAAOC,GAAG,GAAC,CAAX;;AACA,WAAKD,CAAL,IAAUf,MAAV,EAAiB;AACfgB,QAAAA,GAAG,IAAKhB,MAAM,CAACe,CAAD,CAAN,CAAUE,MAAV,GAAmB,MAAKC,WAAhC;;AACA,YAAI,MAAKN,KAAL,CAAWL,WAAX,IAA0BS,GAA9B,EAAkC;AAChC,iBAAOD,CAAP;AACD;AACF;AACF,KAtCY;;AAGX,UAAKL,UAAL,GAAkB,CAAC,cAAD,EAAiB,cAAjB,EAAiC,aAAjC,EAAgD,YAAhD,CAAlB;AACA,UAAKQ,WAAL,GAAmB,CAAnB;;AACA,SAAKH,CAAL,IAAUf,MAAV,EAAiB;AACf,YAAKkB,WAAL,IAAoBlB,MAAM,CAACe,CAAD,CAAN,CAAUE,MAA9B;AACD;;AACD,UAAKL,KAAL,GAAW;AACTR,MAAAA,UAAU,EAAGC,IAAI,CAACC,MAAL,EADJ;AAETC,MAAAA,WAAW,EAAEF,IAAI,CAACC,MAAL;AAFJ,KAAX;AARW;AAYZ;;;;6BA4BO;AAAA;;AACNa,MAAAA,GAAG,GAAG,KAAKL,aAAL,EAAN;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACM,MAAM,CAACC,UAAR,EAAoB;AAACC,UAAAA,eAAe,EAAEtB,MAAM,CAACmB,GAAD,CAAN,CAAYI;AAA9B,SAApB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAEH,MAAM,CAACC,UAAhC;AAA4C,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACnB,iBAAL,EAAN;AAAA,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEkB,MAAM,CAACI,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiC,KAAKhB,iBAAL,EAAjC,OAA4DR,MAAM,CAACmB,GAAD,CAAN,CAAYM,EAAxE,CADF,CADF,CADF;AAOD;;;;EAlDgB1B,KAAK,CAAC2B,S;;AAqDzBN,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AACzBP,EAAAA,UAAU,EAAE;AACVQ,IAAAA,IAAI,EAAE,CADI;AAEVC,IAAAA,UAAU,EAAE,QAFF;AAGVC,IAAAA,cAAc,EAAE;AAHN,GADa;AAMzBP,EAAAA,UAAU,EAAE;AAAKQ,IAAAA,UAAU,EAAE,MAAjB;AAEPC,IAAAA,QAAQ,EAAE,EAFH;AAIPC,IAAAA,KAAK,EAAE,SAJA;AAMPC,IAAAA,SAAS,EAAE;AANJ;AANa,CAAlB,CAAT;AAeA,eAAelC,IAAf","sourcesContent":["import React from 'react'\nimport { StyleSheet, View, TextInput, Button, Text, FlatList, TouchableOpacity } from 'react-native'\nimport colors from \"../../Helpers/colors\"\n\n\nclass Game extends React.Component{\n  constructor(){\n\n    super()\n    this.body_parts = [\"Jambe gauche\", \"Jambe droite\", \"Bras gauche\", \"Bras droit\"]\n    this.sum_weights = 0\n    for (i in colors){\n      this.sum_weights += colors[i].weight\n    }\n    this.state={\n      NumberBody : Math.random(),\n      NumberColor: Math.random()\n    }\n  }\n\n  _Generate_numbers = () => {\n    this.setState({\n\n      NumberBody : Math.random(),\n      NumberColor: Math.random()\n\n    })\n  }\n\n\n  _sample_body_part = () => {\n    var body_part = this.body_parts[Math.floor(this.state.NumberBody * this.body_parts.length)]\n    return body_part\n  }\n\n  _sample_color = () => {\n\n    var i, sum=0\n    for (i in colors){\n      sum += (colors[i].weight / this.sum_weights)\n      if (this.state.NumberColor <= sum){\n        return i\n      }\n    }\n  }\n\n  render(){\n    col = this._sample_color()\n    return(\n      <View style={[styles.main_style, {backgroundColor: colors[col].id}]}>\n        <TouchableOpacity style={styles.main_style} onPress={() => this._Generate_numbers()}>\n          <Text style={styles.text_style}>{this._sample_body_part()} {colors[col].fr}</Text>\n        </TouchableOpacity>\n      </View>\n    )\n  }\n}\n\nstyles = StyleSheet.create({\n  main_style: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text_style: {    fontWeight: 'bold',\n\n       fontSize: 26,\n\n       color: '#A9A9A9',\n\n       fontStyle: 'italic'}\n})\n\nexport default Game\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Card from \"./Card\";\nimport HeaderHeightContext from \"../../utils/HeaderHeightContext\";\nimport useTheme from \"../../../utils/useTheme\";\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n      cardOverlayEnabled = _ref.cardOverlayEnabled,\n      cardShadowEnabled = _ref.cardShadowEnabled,\n      cardStyle = _ref.cardStyle,\n      cardStyleInterpolator = _ref.cardStyleInterpolator,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      gestureDirection = _ref.gestureDirection,\n      gestureEnabled = _ref.gestureEnabled,\n      gestureResponseDistance = _ref.gestureResponseDistance,\n      gestureVelocityImpact = _ref.gestureVelocityImpact,\n      getPreviousRoute = _ref.getPreviousRoute,\n      getFocusedRoute = _ref.getFocusedRoute,\n      headerMode = _ref.headerMode,\n      headerShown = _ref.headerShown,\n      headerStyleInterpolator = _ref.headerStyleInterpolator,\n      headerTransparent = _ref.headerTransparent,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      index = _ref.index,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onTransitionComplete = _ref.onTransitionComplete,\n      onPageChangeCancel = _ref.onPageChangeCancel,\n      onPageChangeConfirm = _ref.onPageChangeConfirm,\n      onPageChangeStart = _ref.onPageChangeStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      previousScene = _ref.previousScene,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene,\n      transitionSpec = _ref.transitionSpec;\n  React.useEffect(function () {\n    onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n  }, [active, onPageChangeConfirm]);\n\n  var handleOpen = function handleOpen() {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, false);\n    onOpenRoute({\n      route: scene.route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, true);\n    onCloseRoute({\n      route: scene.route\n    });\n  };\n\n  var handleTransitionStart = function handleTransitionStart(_ref2) {\n    var closing = _ref2.closing;\n\n    if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: scene.route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  React.useEffect(function () {\n    return onTransitionComplete({\n      route: scene.route\n    });\n  }, []);\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransitionStart: handleTransitionStart,\n    onGestureBegin: onPageChangeStart,\n    onGestureCanceled: onPageChangeCancel,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    containerStyle: headerMode === 'float' && !headerTransparent && headerShown !== false ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: StyleSheet.absoluteFill\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousRoute: getPreviousRoute,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\n\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","transitionSpec","React","onPageChangeConfirm","handleOpen","onTransitionEnd","route","scene","onOpenRoute","handleClose","onCloseRoute","handleTransitionStart","closing","active","onPageChangeCancel","onTransitionStart","insets","top","right","bottom","left","safeAreaInsetLeft","colors","useTheme","listener","value","setPointerEvents","onTransitionComplete","focused","headerShown","marginTop","headerHeight","backgroundColor","background","StyleSheet","absoluteFill","styles","container","renderScene","renderHeader","mode","layout","scenes","getPreviousRoute","getFocusedRoute","gestureDirection","styleInterpolator","onContentHeightChange","onHeaderHeightChange","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport useTheme from '../../../utils/useTheme';\nimport {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onTransitionComplete: (props: { route: Route<string> }) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  getFocusedRoute,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onTransitionComplete,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // `addListener` may not exist on web and older versions of React Native\n    // @ts-ignore\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-ignore\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => onTransitionComplete({ route: scene.route }), []);\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle] as any}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            {renderScene({ route: scene.route })}\n          </HeaderHeightContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousRoute,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ScreenContainer, Screen, screensEnabled } from 'react-native-screens';\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar dimensions = Dimensions.get('window');\nvar layout = {\n  width: dimensions.width,\n  height: dimensions.height\n};\n\nvar MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, [\"enabled\"]);\n\n  if (enabled && screensEnabled()) {\n    return React.createElement(ScreenContainer, rest);\n  }\n\n  return React.createElement(View, rest);\n};\n\nvar MaybeScreen = function MaybeScreen(_ref2) {\n  var enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = _objectWithoutProperties(_ref2, [\"enabled\", \"active\"]);\n\n  if (enabled && screensEnabled()) {\n    return React.createElement(Screen, _extends({\n      active: active\n    }, rest));\n  }\n\n  return React.createElement(View, rest);\n};\n\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getHeaderHeights = function getHeaderHeights(routes, insets, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref3 = descriptors[curr.key] || {},\n        _ref3$options = _ref3.options,\n        options = _ref3$options === void 0 ? {} : _ref3$options;\n\n    var _StyleSheet$flatten = StyleSheet.flatten(options.headerStyle || {}),\n        _StyleSheet$flatten$h = _StyleSheet$flatten.height,\n        height = _StyleSheet$flatten$h === void 0 ? previous[curr.key] : _StyleSheet$flatten$h;\n\n    var safeAreaInsets = _objectSpread({}, insets, {}, options.safeAreaInsets);\n\n    var _options$headerStatus = options.headerStatusBarHeight,\n        headerStatusBarHeight = _options$headerStatus === void 0 ? safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      _ref4$gestureDirectio = _ref4.gestureDirection,\n      gestureDirection = _ref4$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, layout, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  function CardStack() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CardStack)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: layout,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, {})\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref5) {\n      var route = _ref5.route,\n          height = _ref5.height;\n\n      _this.setState(function (_ref6) {\n        var headerHeights = _ref6.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread({}, headerHeights, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          insets = _this$props.insets,\n          descriptors = _this$props.descriptors,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          getPreviousRoute = _this$props.getPreviousRoute,\n          getGesturesEnabled = _this$props.getGesturesEnabled,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          headerMode = _this$props.headerMode,\n          onTransitionComplete = _this$props.onTransitionComplete,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onPageChangeStart = _this$props.onPageChangeStart,\n          onPageChangeConfirm = _this$props.onPageChangeConfirm,\n          onPageChangeCancel = _this$props.onPageChangeCancel;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread({}, defaultTransitionPreset, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n\n      var _ref7 = focusedOptions.safeAreaInsets || {},\n          _ref7$top = _ref7.top,\n          top = _ref7$top === void 0 ? insets.top : _ref7$top,\n          _ref7$right = _ref7.right,\n          right = _ref7$right === void 0 ? insets.right : _ref7$right,\n          _ref7$bottom = _ref7.bottom,\n          bottom = _ref7$bottom === void 0 ? insets.bottom : _ref7$bottom,\n          _ref7$left = _ref7.left,\n          left = _ref7$left === void 0 ? insets.left : _ref7$left;\n\n      var isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n      return React.createElement(React.Fragment, null, React.createElement(MaybeScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        }) : 1;\n\n        var _ref8 = scene.descriptor ? scene.descriptor.options : {},\n            safeAreaInsets = _ref8.safeAreaInsets,\n            headerShown = _ref8.headerShown,\n            headerTransparent = _ref8.headerTransparent,\n            cardShadowEnabled = _ref8.cardShadowEnabled,\n            cardOverlayEnabled = _ref8.cardOverlayEnabled,\n            cardStyle = _ref8.cardStyle,\n            animationEnabled = _ref8.animationEnabled,\n            gestureResponseDistance = _ref8.gestureResponseDistance,\n            gestureVelocityImpact = _ref8.gestureVelocityImpact,\n            _ref8$gestureDirectio = _ref8.gestureDirection,\n            gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n            _ref8$transitionSpec = _ref8.transitionSpec,\n            transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n            _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n            cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n            _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n            headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n\n          if (nextScene) {\n            var _ref9 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                _animationEnabled = _ref9.animationEnabled,\n                _ref9$gestureDirectio = _ref9.gestureDirection,\n                _gestureDirection = _ref9$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref9$gestureDirectio,\n                _ref9$transitionSpec = _ref9.transitionSpec,\n                _transitionSpec = _ref9$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref9$transitionSpec,\n                _ref9$cardStyleInterp = _ref9.cardStyleInterpolator,\n                _cardStyleInterpolator = _ref9$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref9$cardStyleInterp,\n                _ref9$headerStyleInte = _ref9.headerStyleInterpolator,\n                _headerStyleInterpolator = _ref9$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref9$headerStyleInte;\n\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n\n        var _ref10 = safeAreaInsets || {},\n            _ref10$top = _ref10.top,\n            safeAreaInsetTop = _ref10$top === void 0 ? insets.top : _ref10$top,\n            _ref10$right = _ref10.right,\n            safeAreaInsetRight = _ref10$right === void 0 ? insets.right : _ref10$right,\n            _ref10$bottom = _ref10.bottom,\n            safeAreaInsetBottom = _ref10$bottom === void 0 ? insets.bottom : _ref10$bottom,\n            _ref10$left = _ref10.left,\n            safeAreaInsetLeft = _ref10$left === void 0 ? insets.left : _ref10$left;\n\n        var previousRoute = getPreviousRoute({\n          route: scene.route\n        });\n        var previousScene = scenes[index - 1];\n\n        if (previousRoute) {\n          for (var j = index - 1; j >= 0; j--) {\n            var s = scenes[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previousScene = s;\n              break;\n            }\n          }\n        }\n\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: isScreensEnabled,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          previousScene: previousScene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeights[route.key],\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousRoute: getPreviousRoute,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          headerTransparent: headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionComplete: onTransitionComplete,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), headerMode === 'float' ? renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousRoute: getPreviousRoute,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: styles.floating\n      }) : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref11 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref11.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","dimensions","Dimensions","layout","width","height","MaybeScreenContainer","enabled","rest","screensEnabled","MaybeScreen","active","FALLBACK_DESCRIPTOR","options","getHeaderHeights","descriptors","curr","previous","StyleSheet","safeAreaInsets","headerStatusBarHeight","top","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","inputRange","outputRange","React","props","state","gestures","descriptor","animationEnabled","Animated","routes","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","undefined","__memo","headerHeights","e","previousHeight","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerMode","headerStyleInterpolator","forNoAnimationHeader","insets","right","bottom","left","isScreensEnabled","Platform","styles","handleLayout","focused","gesture","isScreenActive","extrapolate","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","getPreviousRoute","previousScene","j","s","closingRouteKeys","getGesturesEnabled","gestureVelocityImpact","renderHeader","getFocusedRoute","onContentHeightChange","styleInterpolator","style","floating","container","flex","overflow","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n  ViewProps,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport { ScreenContainer, Screen, screensEnabled } from 'react-native-screens'; // Import with * as to prevent getters being called\nimport { NavigationState as StackNavigationState } from 'react-navigation';\n\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Route,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionComplete: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst dimensions = Dimensions.get('window');\nconst layout = { width: dimensions.width, height: dimensions.height };\n\nconst MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    return <ScreenContainer {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: number | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    // @ts-ignore\n    return <Screen active={active} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(mode, layout, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  state: State = {\n    routes: [],\n    scenes: [],\n    gestures: {},\n    layout,\n    descriptors: this.props.descriptors,\n    // Used when card's header is null and mode is float to make transition\n    // between screens with headers and those without headers smooth.\n    // This is not a great heuristic here. We don't know synchronously\n    // on mount what the header height is so we have just used the most\n    // common cases here.\n    headerHeights: {},\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionComplete,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS, so we don't enable it there\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            const isScreenActive = scene.progress.next\n              ? scene.progress.next.interpolate({\n                  inputRange: [0, 1 - EPSILON, 1],\n                  outputRange: [1, 1, 0],\n                  extrapolate: 'clamp',\n                })\n              : 1;\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const previousRoute = getPreviousRoute({ route: scene.route });\n\n            let previousScene = scenes[index - 1];\n\n            if (previousRoute) {\n              // The previous scene will be shortly before the current scene in the array\n              // So loop back from current index to avoid looping over the full array\n              for (let j = index - 1; j >= 0; j--) {\n                const s = scenes[j];\n\n                if (s && s.route.key === previousRoute.key) {\n                  previousScene = s;\n                  break;\n                }\n              }\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={previousScene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeights[route.key]}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousRoute={getPreviousRoute}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionComplete={onTransitionComplete}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              getPreviousRoute,\n              getFocusedRoute: this.getFocusedRoute,\n              onContentHeightChange: this.handleHeaderLayout,\n              gestureDirection:\n                focusedOptions.gestureDirection !== undefined\n                  ? focusedOptions.gestureDirection\n                  : defaultTransitionPreset.gestureDirection,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/gaston/Twistobloc/Components/Settings/ColorsItems.js\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\n\nvar ColorItem = function (_React$Component) {\n  _inherits(ColorItem, _React$Component);\n\n  function ColorItem() {\n    var _this;\n\n    _classCallCheck(this, ColorItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorItem).call(this));\n\n    _this.onTextChanged = function (text) {\n      console.log(text == \"\");\n\n      if (text == \"\") {\n        colors[_this.color_id].weight = 0;\n\n        _this.setState({\n          myNumber: 0\n        });\n      } else {\n        text = parseInt(text);\n        colors[_this.color_id].weight = text;\n\n        _this.setState({\n          myNumber: text\n        });\n      }\n    };\n\n    _this.color_id = 0;\n    _this.state = {\n      myNumber: -1\n    };\n    return _this;\n  }\n\n  _createClass(ColorItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          color = _this$props.color,\n          displayColor = _this$props.displayColor;\n      this.color_id = colors.findIndex(function (x) {\n        return x.id === color.id;\n      });\n      this.state.myNumber = colors[this.color_id].weight;\n      return React.createElement(View, {\n        style: [styles.main_container, {\n          backgroundColor: color.id\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        }\n      }, React.createElement(TextInput, {\n        style: styles.title_text,\n        keyboardType: \"numeric\",\n        onChangeText: function onChangeText(text) {\n          return _this2.onTextChanged(text);\n        },\n        value: this.state.myNumber.toString(),\n        maxLength: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        }\n      }));\n    }\n  }]);\n\n  return ColorItem;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  main_container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 120\n  },\n  title_text: {\n    fontWeight: 'bold',\n    fontSize: 32,\n    color: '#A9A9A9',\n    fontStyle: 'italic'\n  }\n});\nexport default ColorItem;","map":{"version":3,"sources":["/home/gaston/Twistobloc/Components/Settings/ColorsItems.js"],"names":["React","ColorItem","onTextChanged","text","console","log","colors","color_id","weight","setState","myNumber","parseInt","state","props","color","displayColor","findIndex","x","id","styles","main_container","backgroundColor","title_text","toString","Component","StyleSheet","create","alignItems","justifyContent","height","fontWeight","fontSize","fontStyle"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;IAKMC,S;;;AACJ,uBAAa;AAAA;;AAAA;;AACT;;AADS,UAQXC,aARW,GAQK,UAACC,IAAD,EAAU;AAEpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,IAAE,EAAlB;;AACA,UAAIA,IAAI,IAAI,EAAZ,EAAe;AACbG,QAAAA,MAAM,CAAC,MAAKC,QAAN,CAAN,CAAsBC,MAAtB,GAA+B,CAA/B;;AACA,cAAKC,QAAL,CAAc;AAACC,UAAAA,QAAQ,EAAC;AAAV,SAAd;AACD,OAHD,MAII;AACFP,QAAAA,IAAI,GAAGQ,QAAQ,CAACR,IAAD,CAAf;AACAG,QAAAA,MAAM,CAAC,MAAKC,QAAN,CAAN,CAAsBC,MAAtB,GAA+BL,IAA/B;;AACA,cAAKM,QAAL,CAAc;AAACC,UAAAA,QAAQ,EAACP;AAAV,SAAd;AACD;AACF,KApBM;;AAET,UAAKI,QAAL,GAAgB,CAAhB;AACA,UAAKK,KAAL,GAAW;AACTF,MAAAA,QAAQ,EAAG,CAAC;AADH,KAAX;AAHS;AAMV;;;;6BAiBM;AAAA;;AAAA,wBACuB,KAAKG,KAD5B;AAAA,UACAC,KADA,eACAA,KADA;AAAA,UACOC,YADP,eACOA,YADP;AAEP,WAAKR,QAAL,GAAgBD,MAAM,CAACU,SAAP,CAAiB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASJ,KAAK,CAACI,EAAnB;AAAA,OAAlB,CAAhB;AACA,WAAKN,KAAL,CAAWF,QAAX,GAAsBJ,MAAM,CAAC,KAAKC,QAAN,CAAN,CAAsBC,MAA5C;AACA,aAEE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACW,MAAM,CAACC,cAAR,EAAwB;AAACC,UAAAA,eAAe,EAAEP,KAAK,CAACI;AAAxB,SAAxB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA,oBAAC,SAAD;AACY,QAAA,KAAK,EAAEC,MAAM,CAACG,UAD1B;AAEY,QAAA,YAAY,EAAG,SAF3B;AAGY,QAAA,YAAY,EAAI,sBAACnB,IAAD;AAAA,iBAAS,MAAI,CAACD,aAAL,CAAmBC,IAAnB,CAAT;AAAA,SAH5B;AAIY,QAAA,KAAK,EAAI,KAAKS,KAAL,CAAWF,QAAX,CAAoBa,QAApB,EAJrB;AAKY,QAAA,SAAS,EAAE,EALvB;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CAFF;AAeD;;;;EA3CqBvB,KAAK,CAACwB,S;;AAgD9B,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAE/BN,EAAAA,cAAc,EAAE;AACdO,IAAAA,UAAU,EAAE,QADE;AAEdC,IAAAA,cAAc,EAAE,QAFF;AAGdC,IAAAA,MAAM,EAAE;AAHM,GAFe;AAS/BP,EAAAA,UAAU,EAAE;AACVQ,IAAAA,UAAU,EAAE,MADF;AAGTC,IAAAA,QAAQ,EAAE,EAHD;AAKTjB,IAAAA,KAAK,EAAE,SALE;AAOTkB,IAAAA,SAAS,EAAE;AAPF;AATmB,CAAlB,CAAf;AAwBA,eAAe/B,SAAf","sourcesContent":["import React from 'react'\n\nimport { StyleSheet, View, Text, TouchableOpacity, TextInput } from 'react-native'\n\n\nclass ColorItem extends React.Component {\n  constructor(){\n      super()\n      this.color_id = 0\n      this.state={\n        myNumber : -1\n      }\n    }\n\n    onTextChanged = (text) => {\n          // code to remove non-numeric characters from text\n          console.log(text==\"\")\n          if (text == \"\"){\n            colors[this.color_id].weight = 0\n            this.setState({myNumber:0})\n          }\n          else{\n            text = parseInt(text)\n            colors[this.color_id].weight = text\n            this.setState({myNumber:text})\n          }\n        }\n\n\n  render() {\n    const {color, displayColor} = this.props\n    this.color_id = colors.findIndex(x => x.id === color.id)\n    this.state.myNumber = colors[this.color_id].weight\n    return (\n\n      <View style={[styles.main_container, {backgroundColor: color.id}]}>\n\n      <TextInput\n                  style={styles.title_text}\n                  keyboardType = 'numeric'\n                  onChangeText = {(text)=> this.onTextChanged(text)}\n                  value = {this.state.myNumber.toString()}\n                  maxLength={10}\n                />\n        </View>\n\n    )\n\n  }\n\n}\n\n\nconst styles = StyleSheet.create({\n\n  main_container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 120\n\n  },\n\n  title_text: {\n    fontWeight: 'bold',\n\n     fontSize: 32,\n\n     color: '#A9A9A9',\n\n     fontStyle: 'italic'\n\n\n  }\n\n})\n\n\nexport default ColorItem\n"]},"metadata":{},"sourceType":"module"}